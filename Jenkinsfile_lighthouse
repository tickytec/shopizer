node {
    def buildSucceeded = false
    def SCRIPT_TO_RUN = "shopizer.js"
   

    stage('preparation') {
        PWD = pwd()
        DATE = String.format('%tF-%<tH-%<tM-%<tS', java.time.LocalDateTime.now())
        RESULTS_DIR = "${PWD}/testResults/${SCRIPT_TO_RUN}/${DATE}"
        sh "mkdir -p ${RESULTS_DIR}" // Create directory if it doesn't exist
        sh '/usr/local/bin/node /Users/Mikita_Khatskevich/.jenkins/workspace/LightHouse_Jenkinsfile/shopizer.js'


    }

    stage('runShell') {
        print "---------- Running tests ----------"
        try {
            sh DOCKER_CMD
            buildSucceeded = true
        } catch (err) {
            echo "Failed: ${err}"
            buildSucceeded = false
        }
    }

    stage('copyResults') {
        sh "rsync -r ${RESULTS_DIR}/ ${PWD}/artifacts/" // Copy contents of testResults to artifacts directory
    }

    stage('addLinkToBuildDescription') {
        def URL = "http://13.11.111.11:9000"
        def link = "<a href='%s/%s/%s'>%s</a><br/>";
        currentBuild.setDescription(String.format(link, URL, SCRIPT_TO_RUN, DATE, "Test result"));
    }

    stage('publishReport') {
        archiveArtifacts allowEmptyArchive: true, artifacts: "artifacts/**/*", onlyIfSuccessful: false // Use artifacts directory instead of testResults
        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "artifacts",
            reportFiles: "index.html",
            reportName: "HTML Report",
            reportTitles: ""
        ])
    }

    stage('verifyBuild') {
        if (!buildSucceeded){
            error("Build failed...")
        } else{
            echo 'Succeeded!'
        }
    }
}
