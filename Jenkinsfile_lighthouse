
  node {
    def buildSucceeded = false
    def SCRIPT_TO_RUN = "shopizer.js"

    stage('preparation') {
        PWD=pwd()
        DATE= String.format('%tF-%<tH-%<tM-%<tS', java.time.LocalDateTime.now())
        RESULTS_DIR="testResults/${SCRIPT_TO_RUN}/${DATE}"
        DOCKER_CMD = "docker run --rm -v $WORKSPACE/testResults:$PWD/reports -w '$PWD' ibombit/lighthouse-puppeteer-chrome:latest node ${SCRIPT_TO_RUN}"
    }

    stage('runShell') {
        print "---------- Running tests ----------"
        try {
            sh DOCKER_CMD
            buildSucceeded = true
        } catch (err) {
            echo "Failed: ${err}"
            buildSucceeded = false
        }
    }

    stage('copyResults') {
        sh "rsync -r ${PWD}/testResults/* /LightHouseReport/"
    }

    stage('addLinkToBuildDescription') {
        def URL = "http://13.11.111.11:9000"
        def link = "<a href='%s/%s/%s'>%s</a><br/>";
        currentBuild.setDescription(String.format(link, URL, SCRIPT_TO_RUN, DATE, "Test result"));
    }

    stage('publishReport') {
        archiveArtifacts allowEmptyArchive: true, artifacts: "${RESULTS_DIR}/**/*", onlyIfSuccessful: false
        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "${RESULTS_DIR}",
            reportFiles: "index.html",
            reportName: "HTML Report",
            reportTitles: ""
        ])
    }

    stage('verifyBuild') {
        if (!buildSucceeded){
            error("Build failed...")
        } else{
            echo 'Succeeded!'
        }
    }
}
